{"version":3,"sources":["serviceWorker.js","home/App.js","list/List.js","index.js"],"names":["Boolean","window","location","hostname","match","App","className","type","href","target","rel","Bmob","initialize","query","Query","dataArr","List","props","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","style","padding","ref","node","searchInput","placeholder","value","onChange","e","onPressEnter","handleSearch","width","marginBottom","display","onClick","icon","size","marginRight","handleReset","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","highlightStyle","backgroundColor","searchWords","state","searchText","autoEscape","textToHighlight","setState","handleOk","confirmLoading","destroy","deleteid","then","res","msg","genData","message","success","catch","err","console","log","error","handleCancel","data","loading","ModalText","reqNum","limit","skip","find","i","length","push","key","id","name","price","this","columns","title","handleDelete","dataSource","float","onOk","onCancel","React","Component","ReactDOM","exact","path","component","Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68b106b5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport { Button } from 'antd';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button type=\"primary\">Button</Button>\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { Table, Input, Button, Icon, Modal, message } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport Bmob from \"hydrogen-js-sdk\";\nBmob.initialize(\"57b561f7d48f3c2e\", \"191019\");\nvar query = Bmob.Query(\"wine\");\nvar dataArr = [];\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchText: '',\n      data: [],\n      loading: true,\n      visible: false,\n      confirmLoading: false,\n      ModalText: '',\n      deleteid : 0\n    };\n  }\n\n  genData(reqNum = 0) {\n    dataArr = [];\n    query.limit(10);\n    query.skip(10 * reqNum);\n    query.find().then(res => {\n      for (let i = 0; i < res.length; i++) {\n        dataArr.push({\n          key: i,\n          id: `${res[i]['objectId']}`,\n          name: res[i]['Name'],\n          price: `${res[i]['Price']}`\n        });\n      }\n    }).then(res => {\n      setTimeout(() => this.setState({\n        data: dataArr,\n        loading: false\n      }), 0);\n    })\n  }\n\n  componentDidMount() {\n    this.genData()\n  }\n\n  getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={node => {\n            this.searchInput = node;\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Button\n          type=\"primary\"\n          onClick={() => this.handleSearch(selectedKeys, confirm)}\n          icon=\"search\"\n          size=\"small\"\n          style={{ width: 90, marginRight: 8 }}\n        >\n          Search\n        </Button>\n        <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n          Reset\n        </Button>\n      </div>\n    ),\n    filterIcon: filtered => (\n      <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n    ),\n    onFilter: (value, record) =>\n      record[dataIndex]\n        .toString()\n        .toLowerCase()\n        .includes(value.toLowerCase()),\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select());\n      }\n    },\n    render: text => (\n      <Highlighter\n        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n        searchWords={[this.state.searchText]}\n        autoEscape\n        textToHighlight={text.toString()}\n      />\n    ),\n  });\n\n  handleSearch = (selectedKeys, confirm) => {\n    confirm();\n    this.setState({ searchText: selectedKeys[0] });\n  };\n\n  handleReset = clearFilters => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n\n  handleDelete(id, name){\n    //console.log(text)\n    this.setState({\n      visible: true,\n      ModalText: `确认删除 ${name} ?`,\n      deleteid: id\n    })\n  }\n  handleOk = () => {\n    this.setState({\n      confirmLoading: true,\n    });\n\n    query.destroy(this.state.deleteid).then(res => {\n      \n      if(res.msg == 'ok'){\n        this.genData()\n        this.setState({\n          visible: false,\n          confirmLoading: false,\n        });\n        message.success('删除成功');\n      }\n    }).catch(err => {\n      console.log(err)\n      message.error('删除失败');\n    })\n\n  };\n\n  handleCancel = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n    const columns = [\n      {\n        title: '商品ID',\n        dataIndex: 'id',\n        key: 'id',\n        width: '20%',\n        ...this.getColumnSearchProps('id'),\n      },\n      {\n        title: '商品名称',\n        dataIndex: 'name',\n        key: 'name',\n        width: '30%',\n        ...this.getColumnSearchProps('name'),\n      },\n      {\n        title: '商品价格',\n        dataIndex: 'price',\n        key: 'price',\n        ...this.getColumnSearchProps('price'),\n      },\n      {\n        title: '操作',\n        key: 'operate',\n        render: (record) => <div><Button onClick={()=>{this.handleDelete(record.id,record.name)}} type=\"danger\">删除</Button> <Button type=\"ghost\">编辑</Button></div>\n      },\n    ];\n    return (\n      <div>\n      <Table columns={columns}\n        loading={this.state.loading}\n        dataSource={this.state.data}\n        title={() => <Button style={{ float: 'right' }} type=\"primary\">新增</Button>}\n      />\n      <Modal\n          title=\"删除商品\"\n          visible={this.state.visible}\n          onOk={this.handleOk}\n          confirmLoading={this.state.confirmLoading}\n          onCancel={this.handleCancel}\n        >\n          <p>{this.state.ModalText}</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default List;","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './home/App';\nimport * as serviceWorker from './serviceWorker';\n// 路由使用 history模式\nimport { HashRouter,Route } from 'react-router-dom';\n// 路由采用 hash模式\n// import { HashRouter } from 'react-router-dom'\nimport Home from './home/App'\nimport List from './list/List'\n//import Detail from './detail/Detail'\n\nReactDOM.render(\n  <HashRouter>\n    <Route exact path='/' component={Home}/>\n    <Route exact path='/list' component={List}/>\n    {/* <Route exact path='/list/:id' component={Detail}/> */}\n  </HashRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}